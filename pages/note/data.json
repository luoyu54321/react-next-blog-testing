[{"set-ghPages-custom-domain":{"htmlResult":"<h1 id=\"實作紀錄-github-pages-custom-domain-設定\">[實作紀錄] Github pages custom domain 設定</h1>\n<h6 id=\"gh-pagescustom-domaingodaddycname實作筆記\">Gh-pages,custom domain,GoDaddy,CNAME,實作筆記</h6>\n<p>人生第一次買網域，知識量大到我多午睡了一次。\n以下紀錄我的設定過程，如果有任何疑惑或是錯誤的地方，也麻煩提醒我 :)</p>\n<p>等等要做的事情——</p>\n<ol>\n<li>買網域付帳</li>\n<li>GoDaddy DNS 設定（連接 Github)</li>\n<li>Github 添加 CNAME 檔案</li>\n<li>Github Page 設定 custom domain</li>\n<li>修改 next.config.js prefix</li>\n</ol>\n<h2 id=\"實作的部分\">實作的部分</h2>\n<h3 id=\"買網域付帳\">買網域付帳</h3>\n<p>搜尋想要的網域之後，加入購物車，接下來跟一般的網購一樣順暢。我想要呈現的網址是 blog.kkluo.com，所以我買了 kkluo.com，並且等等會設定 subdomain &quot;blog&quot;。\n<img src=\"https://i.imgur.com/QZFhGDS.png\" alt=\"\"></p>\n<h3 id=\"godaddy-dns-設定\">GoDaddy DNS 設定</h3>\n<p>點選下方按鈕之後，進入 DNS 設定頁面。\n<img src=\"https://i.imgur.com/dKIeDhq.png\" alt=\"\"></p>\n<p>接下來，</p>\n<ul>\n<li>增加四組 type A，指向 GitHub Pages 的 IP address。</li>\n<li>修改 name 為 www 的 type CNAME 欄位，指向你的 Github 個人頁面（<strong>不需要加上 repo 的名稱</strong>）</li>\n<li>增加一組 type CNAME，name 設定為 blog，也指向 Github 個人頁面。\n<img src=\"https://i.imgur.com/RdMpXYk.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"github-添加-cname-檔案\">Github 添加 CNAME 檔案</h3>\n<p>在你的 repo 根目錄的部分，新增一個名為 CNAME 的檔案，內容是你的預定網址。\n<img src=\"https://i.imgur.com/fEJN0fJ.png\" alt=\"\"></p>\n<h3 id=\"github-page-設定-custom-domain\">Github Page 設定 custom domain</h3>\n<p>接下來填入 Github page 的設定。\n<img src=\"https://i.imgur.com/UOIQHuI.png\" alt=\"\"></p>\n<h3 id=\"修改-nextconfigjs-prefix\">修改 next.config.js prefix</h3>\n<p>發佈網站之後發現大跑版...原來是 repo 裡的 domain 變數還沒抽換掉。如果有相關 domain 的環境設定，也別忘了。</p>\n"}},{"static-blog-with-next-and-hackmd":{"htmlResult":"<h1 id=\"實作紀錄-使用-github-action-cicd-hackmd-建立即時更新的個人-blog\">[實作紀錄] 使用 Github Action (CI/CD), Hackmd 建立即時更新的個人 blog</h1>\n<h6 id=\"nextdynamic-routegithub-actionhackmd實作筆記\">Next,Dynamic Route,Github Action,Hackmd,實作筆記</h6>\n<p><strong>HackMD 是我習慣的筆記工具，在 code 個人部落格的時候，為了實現做完筆記，一按下 publish，個人部落格立刻產生一篇文章，也不用去搬遷文章或適應新的 CMS 後台...的懶人魔法 (ゝ∀･)，我選擇用 HackMD 的 Github 推拉功能，實現內容的即時更新，而且推拉功能還有像 PR 一樣的 change highlight ，十分親切</strong>。</p>\n<p>略過 Create Next App、Next Dynamic Route 等等有詳細官方教學的部分，這份筆記會紀錄——</p>\n<ol>\n<li>Github Action (CI/CD) with gh-pages(<a href=\"https://www.youtube.com/watch?v=yRz8D_oJMWQ\">參考影片</a>)</li>\n<li>Connect to Hackmd</li>\n<li>將 .md 整理成理想的資料格式</li>\n<li>侷限性</li>\n</ol>\n<hr>\n<h2 id=\"實作的部分\">實作的部分</h2>\n<p>大致介紹一下，這些工具是如何合作的：</p>\n<ol>\n<li>Hackmd push md 檔案到 Github (main branch)</li>\n<li>main 收到內容修改之後，啟動 Github Action 流程</li>\n<li>CICD 流程觸發 generate md to JSON file 的功能</li>\n<li>Next SSR 階段，getStaticProps 會去存取 JSON files，變成 note 頁面底下的 dynamic route 以及相應的頁面內容 e.g. /note/how-to-use-git</li>\n</ol>\n<p>步驟 4 的部分，本來我打算寫一支處理 note 總覽頁面頁數、標籤分類的 API，把處理內容、頁數、整理格式...的部分獨立出去，結果 Next API居然不支援 Next export uwu</p>\n<h3 id=\"hackmd-push-md-檔案到-github\">Hackmd push md 檔案到 Github</h3>\n<p>只要選擇右上角的三個點點，就可以看到「版本與 GitHub 同步」的選項，跟 GitHub 版控一樣會有推送訊息的欄位可以填寫。</p>\n<h3 id=\"啟動-github-action-流程\">啟動 Github Action 流程</h3>\n<p>新增一份 CI 設定檔案在 repo workflows 資料夾內</p>\n<p><img src=\"https://i.imgur.com/oukSBTX.png\" alt=\"\"></p>\n<p>檔案內容我是這樣寫的，大部分都是既有模板：</p>\n<ul>\n<li><p> push: branches[ main ] ——推送到 main 的時候，就要執行這份 CI</p>\n</li>\n<li><p> jobs: build: steps: run: npm run build:blogfile ——我在既有模板裡，新增了 generate md to JSON file 的流程，確保檔案處理好之後，才會執行 npm run build 的部分。</p>\n</li>\n<li><p>with: branch: gh-pages ——跑完之後，我的頁面 deploy 到 gh-pages</p>\n<pre><code class=\"language-yml=\">name: Node.js CI\non:\npush:\n  branches: [ main ]\npull_request:\n  branches: [ main ]\njobs:\nbuild:\n  runs-on: ubuntu-latest\n\n  strategy:\n    matrix:\n      node-version: [14.x, 15.x]\n  steps:\n  - uses: actions/checkout@v2\n  - name: Use Node.js ${{ matrix.node-version }}\n    uses: actions/setup-node@v2\n    with:\n      node-version: ${{ matrix.node-version }}\n  - run: npm ci\n  - run: npm i\n  - run: npm run build:blogfile\n  - run: npm run build\n  - run: npm run export\n  - run: touch ./out/.nojekyll\n  - name: Deploy 🚀\n    uses: JamesIves/github-pages-deploy-action@4.1.1\n    with:\n        branch: gh-pages # The branch the action should deploy to.\n        folder: out # The folder the action should deploy.\n</code></pre>\n</li>\n</ul>\n<p>推送到 main 之後，會看到 Github 的這個位置有的黃色點點（代表 CI 正在運行中）如果是綠色勾勾，就代表運行成功。點擊顏色點點，可以近一步查看 detail。</p>\n<p><img src=\"https://i.imgur.com/xp6WXEi.png\" alt=\"\"></p>\n<h3 id=\"generate-md-to-json-file\">generate md to JSON file</h3>\n<p>為了把 .md 變成可以運用的檔案，我使用的套件是 <a href=\"https://marked.js.org/\">Marked</a>。他可以把 markdown 變成 html object，然後再使用 React 的 dangerouslySetInnerHTML 把內容送進 DOM tree 就可以顯示在畫面上摟。</p>\n<pre><code class=\"language-javascript=\">const getPost = () =&gt; {\n  const PostConfig = []\n  //先選定 md 文章的資料夾\n  const postsDirectory = path.join(process.cwd(), &#39;/pages/note/postContent&#39;)\n  //再進入資料夾，取得文章的檔案名稱，當成 id\n  const fileNames = fs.readdirSync(postsDirectory)\n  fileNames.map((fileName, index) =&gt; {\n    const id = fileName.replace(/\\.md$/, &#39;&#39;)\n    //組成下載檔案的完整路徑\n    const fullPath = path.join(postsDirectory, fileName)\n    //下載檔案\n    const fileContents = fs.readFileSync(fullPath, &#39;utf8&#39;)\n    //使用套件修改檔案格式\n    const htmlResult = marked(fileContents);\n    PostConfig.push({\n      [id]: {\n        htmlResult,\n      }\n    })\n  })\n  //寫入 JSON 檔案，除此之外，我還直接把檔案回傳給 Next 的 getStaticProps\n  fs.writeFile(&quot;pages/note/data.json&quot;, JSON.stringify(clientSidePostConfig), function (err, result) {\n    if (err) console.log(&#39;error&#39;, err);\n  })\n}\n</code></pre>\n<h3 id=\"侷限性\">侷限性</h3>\n<p>Hackmd 渲染到畫面上後，有些東西出不來，例如 YouTube 影片的鑲嵌。還好這個部分影響不大，此外，為了讓部落格 review 頁面就可以先拿到中文標題，放進 meta data 裡，針對 .md 檔案還要做一些繁複的整理，抽取出我們要使用的部分。</p>\n"}}]